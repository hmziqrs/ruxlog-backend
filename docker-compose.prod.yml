version: "3.9"
name: ${PROJECT}

services:
  backend:
  # Prefer a pre-built image when BACKEND_IMAGE is provided; default to a local tag for manual builds
  image: ${BACKEND_IMAGE:-ruxlog_backend:local}
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ${PROJECT}_backend
    restart: always
    labels:
      - traefik.enable=true
      - traefik.http.routers.backend.rule=Host(`${BACKEND_DOMAIN}`)
      - traefik.http.routers.backend.entrypoints=websecure
      - traefik.http.routers.backend.tls.certresolver=letsencrypt
      - traefik.http.routers.backend.middlewares=backend-rate@docker
      - traefik.http.middlewares.backend-rate.ratelimit.average=${BACKEND_RATE_AVG:-10}
      - traefik.http.middlewares.backend-rate.ratelimit.burst=${BACKEND_RATE_BURST:-20}
      - traefik.http.services.backend.loadbalancer.server.port=8888
      - traefik.docker.network=${PROJECT}_network
      # Enable auto-updates by Watchtower (only labeled services will be updated)
      - com.centurylinklabs.watchtower.enable=true
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - network
    env_file:
      - .env.prod
    # When using a remote image, pass through the commit/tag for observability
    environment:
      - IMAGE_TAG=${IMAGE_TAG:-}
    security_opt:
      - no-new-privileges:true
    healthcheck:
      test:
        - CMD-SHELL
        - curl --fail --silent http://localhost:8888/healthz || exit 1
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

  postgres:
    image: postgres:17.6-trixie
    container_name: ${PROJECT}_postgres
    restart: always
    environment:
      PGDATA: /var/lib/postgresql/data/pgdata
    env_file:
      - .env.prod
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true
    user: postgres

  postgres_backup:
    container_name: ${PROJECT}_postgres_backup
    image: prodrigestivill/postgres-backup-local
    restart: always
    volumes:
      - ./backups:/backups
    environment:
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=7
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
    env_file:
      - .env.prod
    networks:
      - network

  redis:
    image: redis:7.4.5-alpine
    container_name: ${PROJECT}_redis
    restart: always
    command: >
      redis-server
      --requirepass "${REDIS_PASSWORD}"
      --acl-pubsub-default allchannels
      --aclfile /etc/redis/prod.acl
    volumes:
      - redis_data:/data
      - ./docker/redis/prod.acl:/etc/redis/prod.acl:ro
    networks:
      - network
    env_file:
      - .env.prod
    healthcheck:
      test:
        [
          "CMD",
          "redis-cli",
          "-u",
          "redis://${REDIS_USER}:${REDIS_PASSWORD}@localhost:6379",
          "PING",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    security_opt:
      - no-new-privileges:true

  redis_backup:
    image: offen/docker-volume-backup
    container_name: ${PROJECT}_redis_backup
    restart: always
    user: root
    volumes:
      - redis_data:/backup/redis:ro
      - ./backups/redis:/archive
    environment:
      - BACKUP_CRON_EXPRESSION=0 0 * * *
      - BACKUP_RETENTION_DAYS=7
      - BACKUP_PREFIX=${PROJECT}_redis
      - BACKUP_SUFFIX=%Y-%m-%d-%H-%M
      - NOTIFICATION_LEVEL=warning
    networks:
      - network
    depends_on:
      - redis

  # Optional: Auto-update service containers when a new image is published
  watchtower:
    image: containrrr/watchtower:1.7.1
    container_name: ${PROJECT}_watchtower
    restart: always
    command: >
      --label-enable \
      --interval 300 \
      --cleanup \
      --include-restarting \
      --rolling-restart \
      --http-api-update
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    env_file:
      - .env.prod
    environment:
      # If your GHCR images are private, ensure the host has `docker login ghcr.io`
      # or provide GHCR creds in .env.prod (GHCR_USER/GHCR_TOKEN not read by watchtower directly).
      - WATCHTOWER_NOTIFICATIONS_LEVEL=info
      # Optional token to secure HTTP API; set WATCHTOWER_TOKEN in .env.prod
      - WATCHTOWER_HTTP_API_TOKEN=${WATCHTOWER_TOKEN:-}
    networks:
      - network
    labels:
      # Expose HTTP API via Traefik only when WATCHTOWER_EXPOSE=true
      - traefik.enable=${WATCHTOWER_EXPOSE:-false}
      - traefik.http.routers.watchtower.rule=Host(`${WATCHTOWER_DOMAIN}`)
      - traefik.http.routers.watchtower.entrypoints=websecure
      - traefik.http.routers.watchtower.tls.certresolver=letsencrypt
      - traefik.http.services.watchtower.loadbalancer.server.port=8080
      - traefik.docker.network=${PROJECT}_network

volumes:
  postgres_data:
    name: ${PROJECT}_postgres_data
    driver: local
  redis_data:
    name: ${PROJECT}_redis_data
    driver: local

networks:
  network:
    name: ${PROJECT}_network
    driver: bridge
